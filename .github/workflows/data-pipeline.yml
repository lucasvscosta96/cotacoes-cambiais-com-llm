name: Data Pipeline

on:
  schedule:
    - cron: '0 2 * * *' 
    
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write 
  pull-requests: write 

jobs:
  build-and-run-pipeline:
    runs-on: ubuntu-latest
    env:
      EXCHANGE_API_KEY: ${{ secrets.EXCHANGE_API_KEY }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
    - name: 1. Checkout code
      uses: actions/checkout@v4 
      
    - name: 2. Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        cache: 'pip'

    - name: 3. Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set PYTHONPATH
      run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/src" >> $GITHUB_ENV

    - name: 4. Run tests
      run: pytest tests/

    - name: 5. Run data pipeline for today
      run: python run_pipeline.py --date $(date +%F)

    - name: 6. Upload processed data as artifact
      uses: actions/upload-artifact@v4
      with:
        name: processed-data
        path: |
          raw/
          silver/
          gold/
          reports/

    - name: 7. Commit and push changes
      run: |
        # Configurar o user.email correto para o bot
        git config --global user.name "github-actions[bot]"
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # O "|| true" ou "|| echo" garante que o pipeline não falhe se não houver mudanças para commitar
        git add raw/ silver/ gold/ reports/
        git commit -m "Update processed data and reports [skip ci]" || echo "No changes to commit"
        
        # PUSH COM AUTENTICAÇÃO: O token precisa ser usado na URL
        REPO=$(echo $GITHUB_REPOSITORY | sed 's/\(.*\)\/\(.*\)/https:\/\/\1:\2@github.com\/\1\/\2/')
        
        # PUSH FINAL para a branch main
        git push origin main || git push "$REPO" main