import streamlit as st
import pandas as pd
import os
import glob
import numpy as np
from datetime import datetime, timedelta, date 
import altair as alt 

# --- Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="Dashboard de Contexto Cambial",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# --- Fun√ß√µes de Ajuda ---

def get_report_path(filename, report_dir="reports"):
    """Retorna o caminho completo para um nome de arquivo de relat√≥rio espec√≠fico."""
    return os.path.join(report_dir, filename)

def get_all_report_files(report_dir="reports"):
    """Encontra e ordena todos os caminhos dos arquivos de relat√≥rio (.txt)."""
    search_path = os.path.join(report_dir, "*.txt")
    list_of_files = glob.glob(search_path)
    if not list_of_files:
        return []
    
    # Ordena pelo timestamp de modifica√ß√£o (mais recente primeiro)
    list_of_files.sort(key=os.path.getmtime, reverse=True)
    
    # Retorna apenas os nomes dos arquivos para exibi√ß√£o
    return [os.path.basename(f) for f in list_of_files]

@st.cache_data
def load_gold_data() -> pd.DataFrame:
    """Carrega e consolida todos os arquivos Parquet da pasta 'gold/'."""
    gold_dir = "gold/"
    if not os.path.exists(gold_dir): return pd.DataFrame() 

    all_files = sorted(glob.glob(os.path.join(gold_dir, "*.parquet")))
    if not all_files: return pd.DataFrame()

    df_list = []
    for file in all_files:
        try:
            df = pd.read_parquet(file)
            date_str = os.path.basename(file).split('.')[0]
            df['date'] = pd.to_datetime(date_str).date() 
            df_list.append(df)
        except Exception as e:
            st.error(f"Erro ao ler o arquivo {file}: {e}")
            
    if not df_list: return pd.DataFrame()

    full_df = pd.concat(df_list, ignore_index=True)
    full_df['rate'] = pd.to_numeric(full_df['rate'], errors='coerce')
    return full_df.sort_values(by="date")

# --- Processamento de Dados (Foco no Contexto) ---

df_raw = load_gold_data()

if df_raw.empty:
    st.title("üìä Dashboard de Cota√ß√µes Cambiais")
    st.warning("Nenhum dado encontrado na pasta /gold/. Execute o pipeline de dados primeiro.")
    st.stop()
    
# Garante que 'date' √© um objeto datetime para a filtragem no Streamlit
df_raw['date'] = pd.to_datetime(df_raw['date'])

# --- Sidebar e Filtros ---

# LLM Summary (Bloco de sele√ß√£o din√¢mica)
available_reports = get_all_report_files()

st.sidebar.title("Resumo da LLM")

if available_reports:
    # 1. Selector para escolher o arquivo de relat√≥rio
    selected_report_filename = st.sidebar.selectbox(
        "Selecione o Relat√≥rio por Data:",
        options=available_reports
    )
    selected_report_path = get_report_path(selected_report_filename)

    try:
        with open(selected_report_path, 'r', encoding='utf-8') as f:
            report_content = f.read()
        
        st.sidebar.header("An√°lise do Dia Selecionado")
        
        # Extrai a data do arquivo para exibi√ß√£o (Assume o formato YYYY-MM-DD_...)
        date_part = selected_report_filename.split('_')[0]
        try:
            display_date = datetime.strptime(date_part, '%Y-%m-%d').strftime('%d/%m/%Y')
        except ValueError:
            # Fallback se o nome n√£o estiver exatamente no formato esperado
            display_date = selected_report_filename
            
        st.sidebar.markdown(f"**Data da An√°lise:** *{display_date}*")
        
        # Usa um expander na sidebar para o texto longo do resumo
        with st.sidebar.expander(f"Ver An√°lise Completa de {display_date}"):
            st.markdown(report_content)
        st.sidebar.divider()
        
    except Exception as e:
        st.sidebar.error(f"Erro ao carregar o relat√≥rio: {e}")
else:
    st.sidebar.warning("Nenhum arquivo de relat√≥rio (.txt) encontrado.")
    st.sidebar.divider()

st.sidebar.header("Filtros do Dashboard")

available_currencies = sorted(df_raw["currency"].unique())
default_currencies = ["USD", "EUR", "GBP"]
selected_currencies = st.sidebar.multiselect(
    "Selecione as moedas para an√°lise:",
    options=available_currencies,
    default=[c for c in default_currencies if c in available_currencies]
)

# --- INCLUS√ÉO DO FILTRO DE DATA ---
min_date = df_raw["date"].min().date()
max_date = df_raw["date"].max().date()

default_start_date = max_date - timedelta(days=30)
if default_start_date < min_date:
    default_start_date = min_date

date_range = st.sidebar.date_input(
    "Selecione o Per√≠odo Hist√≥rico (para o Gr√°fico e Contexto de 7D):",
    value=(default_start_date, max_date), # Padr√£o: √∫ltimos 30 dias
    min_value=min_date,
    max_value=max_date,
)

# Valida√ß√£o do intervalo de datas
if len(date_range) != 2:
    st.sidebar.warning("Por favor, selecione um in√≠cio e um fim para o per√≠odo.")
    st.stop()

start_date = min(date_range)
end_date = max(date_range)
# --- FIM DA INCLUS√ÉO DO FILTRO DE DATA ---

st.sidebar.info(f"Dados atualizados at√©: {max_date.strftime('%d/%m/%Y')}")

# --- C√°lculos de Contexto (Adiciona M√©dia e Volatilidade) ---

# Filtra o DataFrame para o per√≠odo selecionado no sidebar (para o Gr√°fico de Contexto)
df_period_filtered = df_raw[
    (df_raw["date"].dt.date >= start_date) & 
    (df_raw["date"].dt.date <= end_date)
].copy()


# Filtra o DataFrame para os √∫ltimos 7 dias (para calcular a m√©dia, independente do filtro de per√≠odo, a menos que o per√≠odo seja menor que 7 dias)
seven_days_ago_calc = max(max_date - timedelta(days=7), df_raw["date"].min().date())
df_last_7_days = df_raw[df_raw['date'].dt.date >= seven_days_ago_calc].copy()


# Calcula a M√©dia dos √öltimos 7 Dias e a Desvios Padr√£o (Simula√ß√£o de Volatilidade)
context_metrics = df_last_7_days.groupby('currency')['rate'].agg(
    rate_avg_7d='mean',
    rate_std_7d='std'
).reset_index()

# DataFrame do √∫ltimo dia
df_latest = df_raw[df_raw['date'].dt.date == max_date].copy()

# Junta os dados mais recentes com as m√©tricas de contexto
df_analysis = pd.merge(
    df_latest, 
    context_metrics, 
    on='currency', 
    how='left'
)

# Calcula o delta da cota√ß√£o atual vs. a m√©dia dos 7 dias
df_analysis['delta_vs_7d_pct'] = (
    (df_analysis['rate'] - df_analysis['rate_avg_7d']) / df_analysis['rate_avg_7d']
) * 100

# Remove moedas n√£o selecionadas para exibi√ß√£o
df_analysis = df_analysis[df_analysis['currency'].isin(selected_currencies)].copy()

if df_analysis.empty:
    st.title("üìä Dashboard de Cota√ß√µes Cambiais")
    st.warning("Selecione pelo menos uma moeda v√°lida.")
    st.stop()


# --- Layout da P√°gina Principal e KPIs ---

st.title("üß† Dashboard de Contexto Cambial (Base BRL)")
st.markdown(f"An√°lise focada no *snapshot* de **{max_date.strftime('%d/%m/%Y')}**.")
st.markdown("---")

st.subheader("1. KPIs de Benchmarking e Risco")

kpi_cols = st.columns(len(df_analysis) if len(df_analysis) > 0 else 1)
base_currency = df_analysis['base_currency'].iloc[0]

# O loop itera usando idx (√≠ndice) em vez de i para evitar conflito
for idx, row in df_analysis.iterrows():
    currency = row['currency']
    latest_rate = row['rate']
    delta_vs_7d_pct = row['delta_vs_7d_pct']
    std_dev = row['rate_std_7d'] if not pd.isna(row['rate_std_7d']) else 0.0 # Volatilidade

    # 1. Este bloco with est√° agora no escopo correto do loop for
    with kpi_cols[df_analysis.index.get_loc(idx)]: # Usa get_loc(idx) para pegar a posi√ß√£o na coluna, pois df.iterrows() usa o √≠ndice original
        # Inverter o sinal do delta para For√ßa do BRL (Delta negativo = BRL perde for√ßa)
        delta_base_forca = delta_vs_7d_pct * -1 if not pd.isna(delta_vs_7d_pct) else None
        
        # Formata o valor da cota√ß√£o
        value_br = f"{latest_rate:,.4f}".replace(",", "X").replace(".", ",").replace("X", ".")
        
        # Verifica se h√° dados suficientes para a m√©trica de 7 dias
        if not pd.isna(row['rate_avg_7d']):
            # 1. KPI Principal: Cota√ß√£o Atual vs M√©dia 7D
            st.metric(
                label=f"**{base_currency}** vs {currency} | R$ {value_br}",
                value=f"R$ {value_br}", 
                delta=delta_base_forca, # Passa o float para a seta e percentual
                delta_color="normal",
            )
            # 2. Contexto Adicional
            st.caption(f"**vs. M√©dia 7D:** {delta_vs_7d_pct:.2f}%")
            st.caption(f"**Volatilidade (7D):** {std_dev:.5f}") # STD √© um proxy para volatilidade
        else:
            # Exibe N/A se n√£o houver dados hist√≥ricos (menos de 7 dias)
            st.metric(
                label=f"**{base_currency}** vs {currency}",
                value="R$ N/A",
                delta="Dados Insuficientes (7D)"
            )

st.markdown("---")

# --- Gr√°fico de Dispers√£o (Contexto/Risco) ---
st.subheader("2. Posi√ß√£o de Risco (Varia√ß√£o Di√°ria vs Volatilidade)")

# Adiciona o Delta Di√°rio (Se voc√™ tiver a coluna 'daily_change_pct' no Parquet)
# Para fins de demonstra√ß√£o, usaremos o delta_vs_7d_pct como o eixo Y (Varia√ß√£o)

df_analysis['Delta vs 7D (%)'] = df_analysis['delta_vs_7d_pct']
df_analysis['Volatilidade (STD)'] = df_analysis['rate_std_7d'].fillna(0)
df_analysis['Cor'] = np.where(df_analysis['Delta vs 7D (%)'] > 0, 'Perda de For√ßa do BRL', 'Ganho de For√ßa do BRL') 
# CORRE√á√ÉO: A l√≥gica da cor estava invertida. Delta > 0 (taxa subiu) = BRL perde for√ßa.

# Usa Altair para criar um gr√°fico de dispers√£o (Scatter Plot)
if not df_analysis.empty:
    scatter_chart = (
        alt.Chart(df_analysis)
        .mark_circle(size=100)
        .encode(
            x=alt.X("Volatilidade (STD):Q", title="Risco: Volatilidade (Desvio Padr√£o 7D)"),
            y=alt.Y("Delta vs 7D (%):Q", title="Posicionamento (vs. M√©dia 7D)"),
            color=alt.Color("Cor:N", scale=alt.Scale(domain=['Ganho de For√ßa do BRL', 'Perda de For√ßa do BRL'], range=['green', 'red'])),
            tooltip=["currency", "Delta vs 7D (%)", "Volatilidade (STD)"]
        )
        .properties(
            title="Moedas em Contexto de Risco vs Posi√ß√£o Atual"
        )
        .interactive()
    )
    
    # Adiciona linhas de refer√™ncia para o centro
    # Calcula a m√©dia da volatilidade apenas sobre valores v√°lidos
    mean_volatility = df_analysis['Volatilidade (STD)'].replace([np.inf, -np.inf], np.nan).mean()

    ref_lines = alt.Chart(pd.DataFrame({'y': [0], 'x': [mean_volatility]}))
    
    # Linha Horizontal no Zero (Eixo Y)
    hline = ref_lines.mark_rule(color='black', strokeDash=[5,5]).encode(y='y:Q')
    
    # Linha Vertical na M√©dia de Volatilidade (Eixo X)
    v_line = ref_lines.mark_rule(color='gray', strokeDash=[3,3]).encode(x='x:Q')

    st.altair_chart(scatter_chart + hline + v_line, use_container_width=True)
else:
    st.warning("Nenhum dado para o gr√°fico de dispers√£o.")

st.markdown("---")

# --- LLM Insight (Com A√ß√£o) ---
st.subheader("3. An√°lise Executiva da LLM (A√ß√£o Sugerida)")
st.info("A LLM analisa o posicionamento no gr√°fico acima e sugere a√ß√µes.")

# Simula√ß√£o do texto da LLM focado no risco
# Corrigindo a verifica√ß√£o de m√©dia para evitar NaN/inf
mean_volatility_safe = df_analysis['Volatilidade (STD)'].replace([np.inf, -np.inf], np.nan).mean()

if mean_volatility_safe > 0.0005:
    llm_advice = "A volatilidade m√©dia desta semana est√° alta. O **USD** est√° fora do desvio padr√£o e em territ√≥rio de **perda de for√ßa** contra a m√©dia, mas seu risco √© elevado. Recomendamos **adiar 48h** qualquer compra n√£o essencial em USD."
elif df_analysis['Delta vs 7D (%)'].min() < -1.0:
     llm_advice = "O mercado est√° calmo, mas o **EUR** apresentou uma **desvaloriza√ß√£o s√∫bita de 1.5%** em rela√ß√£o √† m√©dia de 7 dias. Esta √© uma janela de oportunidade. Recomendamos **executar compras** na Zona do Euro imediatamente."
else:
     llm_advice = "O mercado cambial est√° est√°vel e pr√≥ximo da m√©dia semanal. N√£o h√° sinais fortes de risco ou oportunidade. Siga o plano de *hedge* programado."

st.markdown(llm_advice)
